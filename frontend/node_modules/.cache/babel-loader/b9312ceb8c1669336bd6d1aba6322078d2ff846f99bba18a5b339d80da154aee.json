{"ast":null,"code":"import axios from'axios';// APIベースURL\nconst API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8002';// Axiosインスタンスの作成\nconst apiClient=axios.create({baseURL:API_BASE_URL,timeout:300000,// 5分のタイムアウト\nheaders:{'Content-Type':'multipart/form-data'}});// レスポンスインターセプター（エラーハンドリング）\napiClient.interceptors.response.use(response=>response,error=>{console.error('API Error:',error);if(error.response){// サーバーがエラーレスポンスを返した場合\nthrow new Error(error.response.data.detail||'サーバーエラーが発生しました');}else if(error.request){// リクエストが送信されたがレスポンスがない場合\nthrow new Error('サーバーに接続できません');}else{// その他のエラー\nthrow new Error('予期しないエラーが発生しました');}});export class ApiService{/**\n   * 要件定義書をアップロードしてシステム要件定義書を生成\n   */static async uploadAndGenerate(file){const formData=new FormData();formData.append('file',file);const response=await apiClient.post('/upload-and-generate',formData,{onUploadProgress:progressEvent=>{if(progressEvent.total){const percentCompleted=Math.round(progressEvent.loaded*100/progressEvent.total);console.log(\"Upload progress: \".concat(percentCompleted,\"%\"));}}});return response.data;}/**\n   * ファイルからテキストのみ抽出（テスト用）\n   */static async extractTextOnly(file){const formData=new FormData();formData.append('file',file);const response=await apiClient.post('/extract-text',formData);return response.data;}/**\n   * 包括的なシステム要件定義書を生成\n   */static async generateComprehensive(file){const formData=new FormData();formData.append('file',file);const response=await apiClient.post('/generate-comprehensive',formData,{onUploadProgress:progressEvent=>{if(progressEvent.total){const percentCompleted=Math.round(progressEvent.loaded*100/progressEvent.total);console.log(\"Upload progress: \".concat(percentCompleted,\"%\"));}}});return response.data;}/**\n   * 機能構成図を生成\n   */static async generateFunctionalDiagram(file){const formData=new FormData();formData.append('file',file);const response=await apiClient.post('/generate-functional-diagram',formData);return response.data;}/**\n   * 外部インターフェース要件を生成\n   */static async generateExternalInterfaces(file){const formData=new FormData();formData.append('file',file);const response=await apiClient.post('/generate-external-interfaces',formData);return response.data;}/**\n   * 性能要件を生成\n   */static async generatePerformanceRequirements(file){const formData=new FormData();formData.append('file',file);const response=await apiClient.post('/generate-performance-requirements',formData);return response.data;}/**\n   * セキュリティ要件を生成\n   */static async generateSecurityRequirements(file){const formData=new FormData();formData.append('file',file);const response=await apiClient.post('/generate-security-requirements',formData);return response.data;}/**\n   * セッションIDを使用して機能構成図を生成\n   */static async generateFunctionalDiagramFromSession(sessionId){const formData=new FormData();formData.append('session_id',sessionId);const response=await apiClient.post('/generate-from-session/functional-diagram',formData);return response.data;}/**\n   * セッションIDを使用して外部インターフェース要件を生成\n   */static async generateExternalInterfacesFromSession(sessionId){const formData=new FormData();formData.append('session_id',sessionId);const response=await apiClient.post('/generate-from-session/external-interfaces',formData);return response.data;}/**\n   * セッションIDを使用して性能要件を生成\n   */static async generatePerformanceRequirementsFromSession(sessionId){const formData=new FormData();formData.append('session_id',sessionId);const response=await apiClient.post('/generate-from-session/performance-requirements',formData);return response.data;}/**\n   * セッションIDを使用してセキュリティ要件を生成\n   */static async generateSecurityRequirementsFromSession(sessionId){const formData=new FormData();formData.append('session_id',sessionId);const response=await apiClient.post('/generate-from-session/security-requirements',formData);return response.data;}/**\n   * セッション情報を取得\n   */static async getSessionInfo(sessionId){const response=await apiClient.get(\"/session/\".concat(sessionId));return response.data;}/**\n   * セッションを削除\n   */static async deleteSession(sessionId){const response=await apiClient.delete(\"/session/\".concat(sessionId));return response.data;}/**\n   * ヘルスチェック\n   */static async healthCheck(){const response=await apiClient.get('/health');return response.data;}}// ファイルバリデーション関数\nexport const validateFile=file=>{var _file$name$split$pop;const allowedExtensions=['.pdf','.docx','.doc','.xlsx','.xls'];// ファイルサイズチェック（10MB）\nconst maxSize=10*1024*1024;if(file.size>maxSize){return'ファイルサイズは10MB以下である必要があります';}// ファイル形式チェック\nconst fileExtension='.'+((_file$name$split$pop=file.name.split('.').pop())===null||_file$name$split$pop===void 0?void 0:_file$name$split$pop.toLowerCase());if(!allowedExtensions.includes(fileExtension)){return'対応していないファイル形式です。PDF、Word、Excelファイルのみアップロード可能です';}return null;};// ダウンロード関数\nexport const downloadAsFile=function(content,filename){let contentType=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'text/markdown';const blob=new Blob([content],{type:contentType});const url=URL.createObjectURL(blob);const link=document.createElement('a');link.href=url;link.download=filename;document.body.appendChild(link);link.click();document.body.removeChild(link);URL.revokeObjectURL(url);};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","timeout","headers","interceptors","response","use","error","console","Error","data","detail","request","ApiService","uploadAndGenerate","file","formData","FormData","append","post","onUploadProgress","progressEvent","total","percentCompleted","Math","round","loaded","log","concat","extractTextOnly","generateComprehensive","generateFunctionalDiagram","generateExternalInterfaces","generatePerformanceRequirements","generateSecurityRequirements","generateFunctionalDiagramFromSession","sessionId","generateExternalInterfacesFromSession","generatePerformanceRequirementsFromSession","generateSecurityRequirementsFromSession","getSessionInfo","get","deleteSession","delete","healthCheck","validateFile","_file$name$split$pop","allowedExtensions","maxSize","size","fileExtension","name","split","pop","toLowerCase","includes","downloadAsFile","content","filename","contentType","arguments","length","undefined","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL"],"sources":["C:/Users/HaruyaKitano/requirements-system-generator/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { SystemRequirementsResponse, FileUploadResponse } from '../types';\n\n// APIベースURL\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8002';\n\n// Axiosインスタンスの作成\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 300000, // 5分のタイムアウト\n  headers: {\n    'Content-Type': 'multipart/form-data',\n  },\n});\n\n// レスポンスインターセプター（エラーハンドリング）\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('API Error:', error);\n    \n    if (error.response) {\n      // サーバーがエラーレスポンスを返した場合\n      throw new Error(error.response.data.detail || 'サーバーエラーが発生しました');\n    } else if (error.request) {\n      // リクエストが送信されたがレスポンスがない場合\n      throw new Error('サーバーに接続できません');\n    } else {\n      // その他のエラー\n      throw new Error('予期しないエラーが発生しました');\n    }\n  }\n);\n\nexport class ApiService {\n  /**\n   * 要件定義書をアップロードしてシステム要件定義書を生成\n   */\n  static async uploadAndGenerate(file: File): Promise<SystemRequirementsResponse> {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const response = await apiClient.post<SystemRequirementsResponse>(\n      '/upload-and-generate',\n      formData,\n      {\n        onUploadProgress: (progressEvent) => {\n          if (progressEvent.total) {\n            const percentCompleted = Math.round(\n              (progressEvent.loaded * 100) / progressEvent.total\n            );\n            console.log(`Upload progress: ${percentCompleted}%`);\n          }\n        },\n      }\n    );\n\n    return response.data;\n  }\n\n  /**\n   * ファイルからテキストのみ抽出（テスト用）\n   */\n  static async extractTextOnly(file: File): Promise<FileUploadResponse> {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const response = await apiClient.post<FileUploadResponse>(\n      '/extract-text',\n      formData\n    );\n\n    return response.data;\n  }\n\n  /**\n   * 包括的なシステム要件定義書を生成\n   */\n  static async generateComprehensive(file: File): Promise<SystemRequirementsResponse> {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const response = await apiClient.post<SystemRequirementsResponse>(\n      '/generate-comprehensive',\n      formData,\n      {\n        onUploadProgress: (progressEvent) => {\n          if (progressEvent.total) {\n            const percentCompleted = Math.round(\n              (progressEvent.loaded * 100) / progressEvent.total\n            );\n            console.log(`Upload progress: ${percentCompleted}%`);\n          }\n        },\n      }\n    );\n\n    return response.data;\n  }\n\n  /**\n   * 機能構成図を生成\n   */\n  static async generateFunctionalDiagram(file: File): Promise<{ original_filename: string; functional_diagram: string; status: string }> {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const response = await apiClient.post(\n      '/generate-functional-diagram',\n      formData\n    );\n\n    return response.data;\n  }\n\n  /**\n   * 外部インターフェース要件を生成\n   */\n  static async generateExternalInterfaces(file: File): Promise<{ original_filename: string; external_interfaces: string; status: string }> {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const response = await apiClient.post(\n      '/generate-external-interfaces',\n      formData\n    );\n\n    return response.data;\n  }\n\n  /**\n   * 性能要件を生成\n   */\n  static async generatePerformanceRequirements(file: File): Promise<{ original_filename: string; performance_requirements: string; status: string }> {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const response = await apiClient.post(\n      '/generate-performance-requirements',\n      formData\n    );\n\n    return response.data;\n  }\n\n  /**\n   * セキュリティ要件を生成\n   */\n  static async generateSecurityRequirements(file: File): Promise<{ original_filename: string; security_requirements: string; status: string }> {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const response = await apiClient.post(\n      '/generate-security-requirements',\n      formData\n    );\n\n    return response.data;\n  }\n\n  /**\n   * セッションIDを使用して機能構成図を生成\n   */\n  static async generateFunctionalDiagramFromSession(sessionId: string): Promise<{ original_filename: string; functional_diagram: string; status: string }> {\n    const formData = new FormData();\n    formData.append('session_id', sessionId);\n\n    const response = await apiClient.post(\n      '/generate-from-session/functional-diagram',\n      formData\n    );\n\n    return response.data;\n  }\n\n  /**\n   * セッションIDを使用して外部インターフェース要件を生成\n   */\n  static async generateExternalInterfacesFromSession(sessionId: string): Promise<{ original_filename: string; external_interfaces: string; status: string }> {\n    const formData = new FormData();\n    formData.append('session_id', sessionId);\n\n    const response = await apiClient.post(\n      '/generate-from-session/external-interfaces',\n      formData\n    );\n\n    return response.data;\n  }\n\n  /**\n   * セッションIDを使用して性能要件を生成\n   */\n  static async generatePerformanceRequirementsFromSession(sessionId: string): Promise<{ original_filename: string; performance_requirements: string; status: string }> {\n    const formData = new FormData();\n    formData.append('session_id', sessionId);\n\n    const response = await apiClient.post(\n      '/generate-from-session/performance-requirements',\n      formData\n    );\n\n    return response.data;\n  }\n\n  /**\n   * セッションIDを使用してセキュリティ要件を生成\n   */\n  static async generateSecurityRequirementsFromSession(sessionId: string): Promise<{ original_filename: string; security_requirements: string; status: string }> {\n    const formData = new FormData();\n    formData.append('session_id', sessionId);\n\n    const response = await apiClient.post(\n      '/generate-from-session/security-requirements',\n      formData\n    );\n\n    return response.data;\n  }\n\n  /**\n   * セッション情報を取得\n   */\n  static async getSessionInfo(sessionId: string): Promise<{ session_id: string; filename: string; created_at: string; last_accessed: string; text_length: number }> {\n    const response = await apiClient.get(`/session/${sessionId}`);\n    return response.data;\n  }\n\n  /**\n   * セッションを削除\n   */\n  static async deleteSession(sessionId: string): Promise<{ message: string }> {\n    const response = await apiClient.delete(`/session/${sessionId}`);\n    return response.data;\n  }\n\n  /**\n   * ヘルスチェック\n   */\n  static async healthCheck(): Promise<{ status: string }> {\n    const response = await apiClient.get('/health');\n    return response.data;\n  }\n}\n\n// ファイルバリデーション関数\nexport const validateFile = (file: File): string | null => {\n\n  const allowedExtensions = ['.pdf', '.docx', '.doc', '.xlsx', '.xls'];\n  \n  // ファイルサイズチェック（10MB）\n  const maxSize = 10 * 1024 * 1024;\n  if (file.size > maxSize) {\n    return 'ファイルサイズは10MB以下である必要があります';\n  }\n\n  // ファイル形式チェック\n  const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();\n  if (!allowedExtensions.includes(fileExtension)) {\n    return '対応していないファイル形式です。PDF、Word、Excelファイルのみアップロード可能です';\n  }\n\n  return null;\n};\n\n// ダウンロード関数\nexport const downloadAsFile = (content: string, filename: string, contentType: string = 'text/markdown') => {\n  const blob = new Blob([content], { type: contentType });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAGzB;AACA,KAAM,CAAAC,YAAY,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,uBAAuB,CAE7E;AACA,KAAM,CAAAC,SAAS,CAAGL,KAAK,CAACM,MAAM,CAAC,CAC7BC,OAAO,CAAEN,YAAY,CACrBO,OAAO,CAAE,MAAM,CAAE;AACjBC,OAAO,CAAE,CACP,cAAc,CAAE,qBAClB,CACF,CAAC,CAAC,CAEF;AACAJ,SAAS,CAACK,YAAY,CAACC,QAAQ,CAACC,GAAG,CAChCD,QAAQ,EAAKA,QAAQ,CACrBE,KAAK,EAAK,CACTC,OAAO,CAACD,KAAK,CAAC,YAAY,CAAEA,KAAK,CAAC,CAElC,GAAIA,KAAK,CAACF,QAAQ,CAAE,CAClB;AACA,KAAM,IAAI,CAAAI,KAAK,CAACF,KAAK,CAACF,QAAQ,CAACK,IAAI,CAACC,MAAM,EAAI,gBAAgB,CAAC,CACjE,CAAC,IAAM,IAAIJ,KAAK,CAACK,OAAO,CAAE,CACxB;AACA,KAAM,IAAI,CAAAH,KAAK,CAAC,cAAc,CAAC,CACjC,CAAC,IAAM,CACL;AACA,KAAM,IAAI,CAAAA,KAAK,CAAC,iBAAiB,CAAC,CACpC,CACF,CACF,CAAC,CAED,MAAO,MAAM,CAAAI,UAAW,CACtB;AACF;AACA,KACE,YAAa,CAAAC,iBAAiBA,CAACC,IAAU,CAAuC,CAC9E,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAEH,IAAI,CAAC,CAE7B,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAN,SAAS,CAACoB,IAAI,CACnC,sBAAsB,CACtBH,QAAQ,CACR,CACEI,gBAAgB,CAAGC,aAAa,EAAK,CACnC,GAAIA,aAAa,CAACC,KAAK,CAAE,CACvB,KAAM,CAAAC,gBAAgB,CAAGC,IAAI,CAACC,KAAK,CAChCJ,aAAa,CAACK,MAAM,CAAG,GAAG,CAAIL,aAAa,CAACC,KAC/C,CAAC,CACDd,OAAO,CAACmB,GAAG,qBAAAC,MAAA,CAAqBL,gBAAgB,KAAG,CAAC,CACtD,CACF,CACF,CACF,CAAC,CAED,MAAO,CAAAlB,QAAQ,CAACK,IAAI,CACtB,CAEA;AACF;AACA,KACE,YAAa,CAAAmB,eAAeA,CAACd,IAAU,CAA+B,CACpE,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAEH,IAAI,CAAC,CAE7B,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAN,SAAS,CAACoB,IAAI,CACnC,eAAe,CACfH,QACF,CAAC,CAED,MAAO,CAAAX,QAAQ,CAACK,IAAI,CACtB,CAEA;AACF;AACA,KACE,YAAa,CAAAoB,qBAAqBA,CAACf,IAAU,CAAuC,CAClF,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAEH,IAAI,CAAC,CAE7B,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAN,SAAS,CAACoB,IAAI,CACnC,yBAAyB,CACzBH,QAAQ,CACR,CACEI,gBAAgB,CAAGC,aAAa,EAAK,CACnC,GAAIA,aAAa,CAACC,KAAK,CAAE,CACvB,KAAM,CAAAC,gBAAgB,CAAGC,IAAI,CAACC,KAAK,CAChCJ,aAAa,CAACK,MAAM,CAAG,GAAG,CAAIL,aAAa,CAACC,KAC/C,CAAC,CACDd,OAAO,CAACmB,GAAG,qBAAAC,MAAA,CAAqBL,gBAAgB,KAAG,CAAC,CACtD,CACF,CACF,CACF,CAAC,CAED,MAAO,CAAAlB,QAAQ,CAACK,IAAI,CACtB,CAEA;AACF;AACA,KACE,YAAa,CAAAqB,yBAAyBA,CAAChB,IAAU,CAAsF,CACrI,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAEH,IAAI,CAAC,CAE7B,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAN,SAAS,CAACoB,IAAI,CACnC,8BAA8B,CAC9BH,QACF,CAAC,CAED,MAAO,CAAAX,QAAQ,CAACK,IAAI,CACtB,CAEA;AACF;AACA,KACE,YAAa,CAAAsB,0BAA0BA,CAACjB,IAAU,CAAuF,CACvI,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAEH,IAAI,CAAC,CAE7B,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAN,SAAS,CAACoB,IAAI,CACnC,+BAA+B,CAC/BH,QACF,CAAC,CAED,MAAO,CAAAX,QAAQ,CAACK,IAAI,CACtB,CAEA;AACF;AACA,KACE,YAAa,CAAAuB,+BAA+BA,CAAClB,IAAU,CAA4F,CACjJ,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAEH,IAAI,CAAC,CAE7B,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAN,SAAS,CAACoB,IAAI,CACnC,oCAAoC,CACpCH,QACF,CAAC,CAED,MAAO,CAAAX,QAAQ,CAACK,IAAI,CACtB,CAEA;AACF;AACA,KACE,YAAa,CAAAwB,4BAA4BA,CAACnB,IAAU,CAAyF,CAC3I,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAEH,IAAI,CAAC,CAE7B,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAN,SAAS,CAACoB,IAAI,CACnC,iCAAiC,CACjCH,QACF,CAAC,CAED,MAAO,CAAAX,QAAQ,CAACK,IAAI,CACtB,CAEA;AACF;AACA,KACE,YAAa,CAAAyB,oCAAoCA,CAACC,SAAiB,CAAsF,CACvJ,KAAM,CAAApB,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,YAAY,CAAEkB,SAAS,CAAC,CAExC,KAAM,CAAA/B,QAAQ,CAAG,KAAM,CAAAN,SAAS,CAACoB,IAAI,CACnC,2CAA2C,CAC3CH,QACF,CAAC,CAED,MAAO,CAAAX,QAAQ,CAACK,IAAI,CACtB,CAEA;AACF;AACA,KACE,YAAa,CAAA2B,qCAAqCA,CAACD,SAAiB,CAAuF,CACzJ,KAAM,CAAApB,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,YAAY,CAAEkB,SAAS,CAAC,CAExC,KAAM,CAAA/B,QAAQ,CAAG,KAAM,CAAAN,SAAS,CAACoB,IAAI,CACnC,4CAA4C,CAC5CH,QACF,CAAC,CAED,MAAO,CAAAX,QAAQ,CAACK,IAAI,CACtB,CAEA;AACF;AACA,KACE,YAAa,CAAA4B,0CAA0CA,CAACF,SAAiB,CAA4F,CACnK,KAAM,CAAApB,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,YAAY,CAAEkB,SAAS,CAAC,CAExC,KAAM,CAAA/B,QAAQ,CAAG,KAAM,CAAAN,SAAS,CAACoB,IAAI,CACnC,iDAAiD,CACjDH,QACF,CAAC,CAED,MAAO,CAAAX,QAAQ,CAACK,IAAI,CACtB,CAEA;AACF;AACA,KACE,YAAa,CAAA6B,uCAAuCA,CAACH,SAAiB,CAAyF,CAC7J,KAAM,CAAApB,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,YAAY,CAAEkB,SAAS,CAAC,CAExC,KAAM,CAAA/B,QAAQ,CAAG,KAAM,CAAAN,SAAS,CAACoB,IAAI,CACnC,8CAA8C,CAC9CH,QACF,CAAC,CAED,MAAO,CAAAX,QAAQ,CAACK,IAAI,CACtB,CAEA;AACF;AACA,KACE,YAAa,CAAA8B,cAAcA,CAACJ,SAAiB,CAAqH,CAChK,KAAM,CAAA/B,QAAQ,CAAG,KAAM,CAAAN,SAAS,CAAC0C,GAAG,aAAAb,MAAA,CAAaQ,SAAS,CAAE,CAAC,CAC7D,MAAO,CAAA/B,QAAQ,CAACK,IAAI,CACtB,CAEA;AACF;AACA,KACE,YAAa,CAAAgC,aAAaA,CAACN,SAAiB,CAAgC,CAC1E,KAAM,CAAA/B,QAAQ,CAAG,KAAM,CAAAN,SAAS,CAAC4C,MAAM,aAAAf,MAAA,CAAaQ,SAAS,CAAE,CAAC,CAChE,MAAO,CAAA/B,QAAQ,CAACK,IAAI,CACtB,CAEA;AACF;AACA,KACE,YAAa,CAAAkC,WAAWA,CAAA,CAAgC,CACtD,KAAM,CAAAvC,QAAQ,CAAG,KAAM,CAAAN,SAAS,CAAC0C,GAAG,CAAC,SAAS,CAAC,CAC/C,MAAO,CAAApC,QAAQ,CAACK,IAAI,CACtB,CACF,CAEA;AACA,MAAO,MAAM,CAAAmC,YAAY,CAAI9B,IAAU,EAAoB,KAAA+B,oBAAA,CAEzD,KAAM,CAAAC,iBAAiB,CAAG,CAAC,MAAM,CAAE,OAAO,CAAE,MAAM,CAAE,OAAO,CAAE,MAAM,CAAC,CAEpE;AACA,KAAM,CAAAC,OAAO,CAAG,EAAE,CAAG,IAAI,CAAG,IAAI,CAChC,GAAIjC,IAAI,CAACkC,IAAI,CAAGD,OAAO,CAAE,CACvB,MAAO,0BAA0B,CACnC,CAEA;AACA,KAAM,CAAAE,aAAa,CAAG,GAAG,GAAAJ,oBAAA,CAAG/B,IAAI,CAACoC,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,UAAAP,oBAAA,iBAA1BA,oBAAA,CAA4BQ,WAAW,CAAC,CAAC,EACrE,GAAI,CAACP,iBAAiB,CAACQ,QAAQ,CAACL,aAAa,CAAC,CAAE,CAC9C,MAAO,gDAAgD,CACzD,CAEA,MAAO,KAAI,CACb,CAAC,CAED;AACA,MAAO,MAAM,CAAAM,cAAc,CAAG,QAAAA,CAACC,OAAe,CAAEC,QAAgB,CAA4C,IAA1C,CAAAC,WAAmB,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,eAAe,CACrG,KAAM,CAAAG,IAAI,CAAG,GAAI,CAAAC,IAAI,CAAC,CAACP,OAAO,CAAC,CAAE,CAAEQ,IAAI,CAAEN,WAAY,CAAC,CAAC,CACvD,KAAM,CAAAO,GAAG,CAAGC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC,CACrC,KAAM,CAAAM,IAAI,CAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC,CACxCF,IAAI,CAACG,IAAI,CAAGN,GAAG,CACfG,IAAI,CAACI,QAAQ,CAAGf,QAAQ,CACxBY,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC,CAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC,CACZN,QAAQ,CAACI,IAAI,CAACG,WAAW,CAACR,IAAI,CAAC,CAC/BF,GAAG,CAACW,eAAe,CAACZ,GAAG,CAAC,CAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}