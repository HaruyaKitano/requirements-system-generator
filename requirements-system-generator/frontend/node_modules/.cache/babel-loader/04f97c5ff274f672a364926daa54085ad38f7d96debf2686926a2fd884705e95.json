{"ast":null,"code":"import axios from 'axios';\n// APIベースURL\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Axiosインスタンスの作成\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 300000,\n  // 5分のタイムアウト\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n});\n\n// レスポンスインターセプター（エラーハンドリング）\napiClient.interceptors.response.use(response => response, error => {\n  console.error('API Error:', error);\n  if (error.response) {\n    // サーバーがエラーレスポンスを返した場合\n    throw new Error(error.response.data.detail || 'サーバーエラーが発生しました');\n  } else if (error.request) {\n    // リクエストが送信されたがレスポンスがない場合\n    throw new Error('サーバーに接続できません');\n  } else {\n    // その他のエラー\n    throw new Error('予期しないエラーが発生しました');\n  }\n});\nexport class ApiService {\n  /**\n   * 要件定義書をアップロードしてシステム要件定義書を生成\n   */\n  static async uploadAndGenerate(file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await apiClient.post('/upload-and-generate', formData, {\n      onUploadProgress: progressEvent => {\n        if (progressEvent.total) {\n          const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          console.log(`Upload progress: ${percentCompleted}%`);\n        }\n      }\n    });\n    return response.data;\n  }\n\n  /**\n   * ファイルからテキストのみ抽出（テスト用）\n   */\n  static async extractTextOnly(file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await apiClient.post('/extract-text', formData);\n    return response.data;\n  }\n\n  /**\n   * ヘルスチェック\n   */\n  static async healthCheck() {\n    const response = await apiClient.get('/health');\n    return response.data;\n  }\n}\n\n// ファイルバリデーション関数\nexport const validateFile = file => {\n  var _file$name$split$pop;\n  const allowedTypes = ['application/pdf', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/msword', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'];\n  const allowedExtensions = ['.pdf', '.docx', '.doc', '.xlsx', '.xls'];\n\n  // ファイルサイズチェック（10MB）\n  const maxSize = 10 * 1024 * 1024;\n  if (file.size > maxSize) {\n    return 'ファイルサイズは10MB以下である必要があります';\n  }\n\n  // ファイル形式チェック\n  const fileExtension = '.' + ((_file$name$split$pop = file.name.split('.').pop()) === null || _file$name$split$pop === void 0 ? void 0 : _file$name$split$pop.toLowerCase());\n  if (!allowedExtensions.includes(fileExtension)) {\n    return '対応していないファイル形式です。PDF、Word、Excelファイルのみアップロード可能です';\n  }\n  return null;\n};\n\n// ダウンロード関数\nexport const downloadAsFile = (content, filename, contentType = 'text/markdown') => {\n  const blob = new Blob([content], {\n    type: contentType\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","timeout","headers","interceptors","response","use","error","console","Error","data","detail","request","ApiService","uploadAndGenerate","file","formData","FormData","append","post","onUploadProgress","progressEvent","total","percentCompleted","Math","round","loaded","log","extractTextOnly","healthCheck","get","validateFile","_file$name$split$pop","allowedTypes","allowedExtensions","maxSize","size","fileExtension","name","split","pop","toLowerCase","includes","downloadAsFile","content","filename","contentType","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL"],"sources":["C:/Users/HaruyaKitano/requirements-system-generator/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { SystemRequirementsResponse, FileUploadResponse } from '../types';\n\n// APIベースURL\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Axiosインスタンスの作成\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 300000, // 5分のタイムアウト\n  headers: {\n    'Content-Type': 'multipart/form-data',\n  },\n});\n\n// レスポンスインターセプター（エラーハンドリング）\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('API Error:', error);\n    \n    if (error.response) {\n      // サーバーがエラーレスポンスを返した場合\n      throw new Error(error.response.data.detail || 'サーバーエラーが発生しました');\n    } else if (error.request) {\n      // リクエストが送信されたがレスポンスがない場合\n      throw new Error('サーバーに接続できません');\n    } else {\n      // その他のエラー\n      throw new Error('予期しないエラーが発生しました');\n    }\n  }\n);\n\nexport class ApiService {\n  /**\n   * 要件定義書をアップロードしてシステム要件定義書を生成\n   */\n  static async uploadAndGenerate(file: File): Promise<SystemRequirementsResponse> {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const response = await apiClient.post<SystemRequirementsResponse>(\n      '/upload-and-generate',\n      formData,\n      {\n        onUploadProgress: (progressEvent) => {\n          if (progressEvent.total) {\n            const percentCompleted = Math.round(\n              (progressEvent.loaded * 100) / progressEvent.total\n            );\n            console.log(`Upload progress: ${percentCompleted}%`);\n          }\n        },\n      }\n    );\n\n    return response.data;\n  }\n\n  /**\n   * ファイルからテキストのみ抽出（テスト用）\n   */\n  static async extractTextOnly(file: File): Promise<FileUploadResponse> {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const response = await apiClient.post<FileUploadResponse>(\n      '/extract-text',\n      formData\n    );\n\n    return response.data;\n  }\n\n  /**\n   * ヘルスチェック\n   */\n  static async healthCheck(): Promise<{ status: string }> {\n    const response = await apiClient.get('/health');\n    return response.data;\n  }\n}\n\n// ファイルバリデーション関数\nexport const validateFile = (file: File): string | null => {\n  const allowedTypes = [\n    'application/pdf',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    'application/vnd.ms-excel',\n  ];\n\n  const allowedExtensions = ['.pdf', '.docx', '.doc', '.xlsx', '.xls'];\n  \n  // ファイルサイズチェック（10MB）\n  const maxSize = 10 * 1024 * 1024;\n  if (file.size > maxSize) {\n    return 'ファイルサイズは10MB以下である必要があります';\n  }\n\n  // ファイル形式チェック\n  const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();\n  if (!allowedExtensions.includes(fileExtension)) {\n    return '対応していないファイル形式です。PDF、Word、Excelファイルのみアップロード可能です';\n  }\n\n  return null;\n};\n\n// ダウンロード関数\nexport const downloadAsFile = (content: string, filename: string, contentType: string = 'text/markdown') => {\n  const blob = new Blob([content], { type: contentType });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}